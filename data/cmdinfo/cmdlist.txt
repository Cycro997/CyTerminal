Command list
Information
    <req> Required argument
    (opt) Optional argument
    [.pre] Prefix used for categorization
List
    General - [g.]
        g.help (category/command/subcommand/type) - shows a list of commands if without arguments and shows info about
        the specified category or command or subcommand or type if there is an argument - [.hlp]
        g.exit - exits the program - [.ext]
        g.echo <text> - says text - [.ech]
        g.timer <time> <message> - begins a timer, time can be a floating point below 450 (7:30min) or some strings
        like tnsec(10s), twnsec(20s), hlmin(30s), min(1m) and fimin(5m) - [tmr]
        g.version - gives the program version - [.ver]
        g.changelog - gives the program changelog - [.chlg]
        g.gui - enabled gui mode - [.g]
        g.datetime (format) - gets the date time - [.dt]
    Math - [m.]
        m.add <num1> <num2> (num...) - adds num1, num2 and num3 - [.ad]
            m.ad.succeed <num> - gives the successor to num (integer only)
        m.multiply <num1> <num2> (num...) - multiplies num1, num2 and num3 - [.mu]
            m.mu.double <num> - doubles num
        m.subtract <num1> <num2> (num...) - subtracts num1, num2 and num3 - [.su]
            m.su.precede <num> - gives the predecessor to num (integer only)
        m.divide <num1> <num2> (num...) - divides num1, num2 and num3 - [.di]
            m.di.half <num> - halves num
        m.exponentiate <num1> <num2> (num...) - exponentiates num1, num2 and num3 [.ex]
            m.ex.square <num> - squares num
        m.random <min> <max> - returns a random integer between min and max [.ran]
        m.round <number> <tnrst> - returns number rounded to the nearest tnrst - [.rnd]
        m.deldecimalpoint <num> - Removes the decimal point from num - [.ddp]
        m.fibonacci <number> - Gets the fibonacci series up to number - [.fib]
    Data - [d.]
        d,var - [,var]
            d,var.set <datatype> <variable> <newval> - gives variable a new 
            value (newval) as datatype which can be str (string) or int (integer) or flt (float)
            or lst [list] or something else a new value - [.st]
            d,var.display <variable> - displays variable - [.dsp]
            d,var.type <variable> - displays the type of variable - [.tp]
            d,var.append <variable> <object> - adds object to variable - [.apd]
            d,var.compare <variable1> <variable2> - compares variable1 and variable 2 - [.cmp]
            d,var.len <variable> - gives the number of items in variable - [.ln]
            d,var.settype <datatype> <variable> - changes the type of variable - [.stp]
            d,var.addsetitem <variable> <object> - adds object to variable - [.asi]
            d,var.adddictitem <variable> <key> <value> - adds a dictionary item to a variable - [.adi]
        d,file - [,file]
            d,file.read <file> - reads file - [.r]
            d,file.write <file> <contents> - overwrites file - [.w]
            d,file.delete <file> - deletes file - [.d]
            d,file.writetovar <variable> <file> - makes the value of variable become file - [.wtv]
    Logic - [l.]
        l.not <r> - performs logical not on r - [.n]
        l.and <l> <r> - performs logical and on l and r - [.a]
        l.nand <l> <r> - performs logical nand on l and r - [.na]
        l.or <l> <r> - performs logical or on l and r - [.o]
        l.nor <l> <r> - performs logical nor on l and r - [.no]
        l.xor <l> <r> - performs logical xor on l and r - [.x]
        l.xnor <l> <r> - performs logical xnor on l and r - [.nx]
        l.is <l> <r> - checks if l and r are the same (boolean) - [.i]
        l.nis <l> <r> - checks if l and r are not the same (boolean) - [.ni]
        l.binary <b10> - changes the base of b10 to binary - [.b2]
    Script - [s.]
        s.ctscr <script> - runs script as a ctscript script - [.cts]
